package com.example.farmsim.websocket;

import com.example.farmsim.model.entity.*;
import com.example.farmsim.repository.AgentCommandRepo;
import com.example.farmsim.repository.AgentRepo;
import com.example.farmsim.repository.EnvironmentRepo;
import com.example.farmsim.repository.SimulationRepo;
import com.example.farmsim.service.AgentService;
import com.example.farmsim.service.SimulationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.List;


@Component
public class EnvScheduler {

    @Autowired
    private SimulationRepo simulationRepo;

    @Autowired
    private SimulationService simulationService;

    @Autowired
    private AgentCommandRepo agentCommandRepo;

    @Autowired
    private AgentService agentService;

    @Autowired
    private EnvironmentRepo environmentRepo;

    @Autowired
    private AgentRepo agentRepo;

    private double previousTemperature = Double.NaN; // 初始值为无效值
    private double previousSoilFertility = Double.NaN;
    private double previousPrecipitation = Double.NaN;

    @Scheduled(fixedRate = 60000) // 每分钟更新一次
    public void updateEnvironment() {
        List<Simulation> runningSimulations = simulationRepo.findByStatus(SimulationStatus.RUNNING);
        for (Simulation sim : runningSimulations) {
            Environment latestEnv = environmentRepo.findTopBySimulationIdOrderByTimestampDesc(sim.getId());
            if (latestEnv != null) {
                // 获取当前季节
                String currentSeason = calculateSeason(sim.getStartDate());

                // 使用 WeatherModel 生成新的天气数据
                Environment newWeather = WeatherModel.generateWeather(currentSeason);
                latestEnv.setTemperature(newWeather.getTemperature());
                latestEnv.setPrecipitation(newWeather.getPrecipitation());
                environmentRepo.save(latestEnv);
            }
        }
    }

    @Scheduled(fixedRate = 60000) // 每分钟执行一次
    public void optimizeResources() {
        List<Simulation> simulations = simulationRepo.findAll();
        for (Simulation sim : simulations) {
            // 检查是否有专家Agent
            List<Agent> experts = agentRepo.findBySimulationIdAndRoleType(sim.getId(), "AGRONOMIST");
            if (!experts.isEmpty()) {
                agentService.optimizeResourceAllocation(sim.getId());
            }
        }
    }

    @Scheduled(fixedRate = 60000)
    public void autoGenerateDecisions() {
        List<Simulation> runningSimulations = simulationRepo.findByStatus(SimulationStatus.RUNNING);
        for (Simulation sim : runningSimulations) {
            String simulationId = sim.getId();

            String dialogueResult = agentService.startAutoDialogue(simulationId);
            System.out.println("自动对话结果：" + dialogueResult);
            // 主动生成决策并执行
            String decision = agentService.generateAutomaticDecision(simulationId);
            System.out.println("自动决策执行结果：" + decision);
        }
    }

    @Scheduled(fixedRate = 300000) // 每5分钟触发一次
    public void triggerAutoDialogue() {
        List<Simulation> runningSimulations = simulationRepo.findByStatus(SimulationStatus.RUNNING);
        for (Simulation sim : runningSimulations) {
            String simulationId = sim.getId();
            agentService.startAutoDialogue(simulationId);
        }
    }

    @Scheduled(fixedRate = 60000) // 每分钟检测一次
    public void checkEnvironmentChanges() {
        List<Simulation> simulations = simulationRepo.findAll();
        for (Simulation sim : simulations) {
            Environment latestEnv = environmentRepo.findTopBySimulationIdOrderByTimestampDesc(sim.getId());
            if (latestEnv != null && isEnvironmentChanged(latestEnv)) {
                agentService.optimizeResourceAllocation(sim.getId());
            }
        }
    }

    @Scheduled(fixedRate = 60000)
    public void updateSeason() {
        List<Simulation> simulations = simulationRepo.findAll();
        for (Simulation sim : simulations) {
            String newSeason = calculateSeason(sim.getStartDate()); // 根据模拟开始日期计算季节
            sim.setSeason(newSeason);
            simulationRepo.save(sim);
        }
    }

    private String calculateSeason(LocalDate startDate) {
        // 计算模拟运行的天数
        long daysSinceStart = ChronoUnit.DAYS.between(startDate, LocalDate.now());

        // 根据天数计算当前季节
        int seasonIndex = (int) (daysSinceStart / 90) % 4; // 每 90 天为一个季节
        switch (seasonIndex) {
            case 0:
                return "spring";
            case 1:
                return "summer";
            case 2:
                return "autumn";
            case 3:
                return "winter";
            default:
                return "spring"; // 默认返回春季
        }
    }

    private boolean isEnvironmentChanged(Environment env) {
        // 检测温度、降水量、土壤肥力是否变化
        return Math.abs(env.getTemperature() - previousTemperature) > 2 ||
                Math.abs(env.getPrecipitation() - previousPrecipitation) > 10 ||
                Math.abs(env.getSoilFertility() - previousSoilFertility) > 0.1;
    }
}